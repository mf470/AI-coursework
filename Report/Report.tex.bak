\documentclass[12pt,a4paper,twoside]{article}
  \usepackage[utf8]{inputenc}
  \usepackage{amsmath}
  \usepackage{amsfonts}
  \usepackage{amssymb}
  \usepackage{titlesec}
  
  \setcounter{secnumdepth}{4}
  \title{Artificial Intelligence and Applications Coursework}
  \author{}
  \date{}
  \begin{document}
  
  \maketitle
  \tableofcontents
  
    \section{Implement a heuristic search algorithm: A* and the 8-puzzle game.}
    \subsection{How you would frame the 8-puzzle problem as a search problem?}
    Framing the 8-puzzle as a search problem is fairly simple. A graph can be constructed, where the 
    nodes represent different states of the game and an arc between the nodes represents that one 
    game state can be reached by making a legal move from the other. Each arc will have a weight of 
    1 so that when it is searched a minimal solution is found. This graph can then be searched from 
    the start state until the goal state is reached, to obtain a set of moves to solve the problem. 
    Another way this could be done is by constructing a tree from the start state in much the same 
    way as before, where each node is a game state and the children of each node is a game state that 
    can be reached from the game state by making a legal move. The tree could terminated at a 
    certain depth where generating more nodes would be computationally infeasible or where a 
    solution would definitely have been found. A breadth first search could then be run on the tree to 
    find the shortest path. 
    
    \subsection{Solve the 8-puzzle problem using A*}
    \subsubsection{Briefly outline the A* algorithm}
    The A* search algorithm is a heuristic graph search algorithm. This means that when it is 
    deciding which node to travel to next, it not only considers the the total length of arcs travelled, 
    but also a heuristic function. For example if A* is being used for calculating the shortest route 
    between two cities, the heuristic function may be the straight line Euclidean distance between 
    the current position and the goal city. In this case the considered value at a node would be the 
    total distance to travel to that position plus the euclidean distance to the goal. 
    
    \subsubsection{Describe two admissible heuristic functions for the 8-puzzle problem}
    One heuristic function that could be used is the Hamming Distance, i.e. the number of tiles that 
    are mismatched from the goal state. This is admissible as the number of moves needed to reach 
    the goal state is at least the total number of mismatched tiles. This means that it is optimistically 
    estimating how many moves left to reach the goal state, this means that the A* will be optimal.
    
    Another admissible heuristic function is the Manhattan distance. This is the sum for all tiles of 
    the total number of horizontal and vertical moves that would be needed to get a tile from its 
    current position to its position in the goal state. For example to get a tile from (2,3) to (1,1) the 
    tile needs to move 1 to the left and 2 down, so the distance for this tile is 3 and the Manhattan 
    distance for the game state would be the sum of these over all the tiles. This again is admissible 
    as it underestimates the number of moves needed to reach the goal state. This heuristic should 
    be better than the Hamming distance as it is less optimistic and should reflect how far away you 
    are from the goal state.
    
    \subsubsection{Implement two versions of the A* algorithm}
    
  \end{document}
